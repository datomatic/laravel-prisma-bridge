<?php

namespace Datomatic\LaravelPrismaBridge\Migrations;

use Illuminate\Support\Facades\File;

class SqlFileRepository
{
    protected function getSafeFolderName(string $name): string
    {
        $timestamp = preg_match('/^(\d{14})_/', $name, $matches);
        $timestamp = $timestamp ? ($matches[1] ?? null) : null;
        if (! $timestamp) {
            return $name;
        }

        $prismaPath = config('prisma-bridge.path', base_path('prisma'));
        $directoryPath = implode(DIRECTORY_SEPARATOR, [
            $prismaPath,
            'migrations',
        ]);
        if (! File::exists($directoryPath)) {
            File::makeDirectory($directoryPath, 0755, true);
        }
        $directories = File::directories($directoryPath);
        $directories = collect($directories)->map(function ($directory) {
            $pos = strrpos($directory, '/');

            return $pos === false ? $directory : substr($directory, $pos + 1);
        })->map(function ($directory) {
            if (preg_match('/^(\d{14})(_(\d+)_)?/', $directory, $matches)) {
                return $matches[1].(isset($matches[3]) ? '_'.$matches[3] : '');
            } else {
                return null;
            }
        })->filter(function ($directory) use ($timestamp) {
            if (! empty($directory) && preg_match('/^(\d{14})(_|$)/', $directory, $matches)) {
                return $matches[1] === $timestamp;
            }

            return false;
        })
          ->toArray();

        $maxIndex = -1;
        foreach ($directories as $directory) {
            if (preg_match('/^(\d{14})_(\d+)$/', $directory, $matches)) {
                $currentIndex = intval($matches[2]);
                if ($currentIndex >= $maxIndex) {
                    $maxIndex = $currentIndex + 1;
                }
            }
        }

        $name = preg_replace('/^(\d{14})(_(\d+))?_/', '', $name);
        $name = $timestamp.'_'.($maxIndex >= 0 ? $maxIndex : 1).'_'.$name;

        return $name;
    }

    /**
     * Create a migration sql file to be used by Prisma
     *
     * @param  string  $name
     * @param  string|string[]  $queries
     * @param  bool  $addTimestamp Adds timestamp to the name of the migration
     * @return string|false
     */
    public function createMigrationSqlFile(string $name, string|array $queries, bool $addTimestamp = true): string|false
    {
        if ($addTimestamp) {
            $name = date('YmdHis').'_'.$name;
        }

        $name = $this->getSafeFolderName($name);

        if (is_array($queries)) {
            $queries = array_map(fn ($query) => $query.';', $queries);
            $queries = implode(PHP_EOL.PHP_EOL, $queries).PHP_EOL;
            $queries = '/*'.PHP_EOL.'  Generated by Laravel Prisma Generator'.PHP_EOL.'*/'.PHP_EOL.PHP_EOL.$queries;
        }

        $prismaPath = config('prisma-bridge.path', base_path('prisma'));

        $directoryPath = implode(DIRECTORY_SEPARATOR, [
            $prismaPath,
            'migrations',
            $name,
        ]);
        if (! File::exists($directoryPath)) {
            File::makeDirectory($directoryPath, 0755, true);
        }

        $filePath = $directoryPath.DIRECTORY_SEPARATOR.'migration.sql';
        $result = File::put($filePath, $queries);

        return ! $result ? false : $name;
    }
}
